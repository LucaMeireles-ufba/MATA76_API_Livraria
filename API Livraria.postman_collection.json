{
	"info": {
		"_postman_id": "21a56084-12e8-4448-a84d-912bf5a3e238",
		"name": "API Livraria",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24366056"
	},
	"item": [
		{
			"name": "books",
			"item": [
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"    \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"     var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"    schema =  \r",
									"    {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": \"integer\",\r",
									"            \"name\": \"string\",\r",
									"            \"author\": \"string\",\r",
									"            \"year_publication\": \"integer\",\r",
									"            \"publishing_company\": \"string\",\r",
									"            \"subject\": \"string\",\r",
									"            \"description\": \"string\",\r",
									"            \"isbn\": \"string\",\r",
									"            \"shelf_location\": \"string\",\r",
									"            \"status\": \"string\"\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors))\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/books?limit=1&page=2&author=Daniel Santos&year_publications=2028&name=Caulculo numérico&publishing_company=Arqueiro&subject=matemática&ISBN=ISBN 1321546512313&status=DISPONIVEL",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "author",
									"value": "Daniel Santos"
								},
								{
									"key": "year_publications",
									"value": "2028"
								},
								{
									"key": "name",
									"value": "Caulculo numérico"
								},
								{
									"key": "publishing_company",
									"value": "Arqueiro"
								},
								{
									"key": "subject",
									"value": "matemática"
								},
								{
									"key": "ISBN",
									"value": "ISBN 1321546512313"
								},
								{
									"key": "status",
									"value": "DISPONIVEL"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"    \"Missing properties\",\r",
									"    \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Álgebra Linear\",\r\n    \"author\": \"Boldrini\",\r\n    \"year_publication\": 2022,\r\n    \"publishing_company\": \"Arqueiro\",\r\n    \"subject\": \"Matemática\",\r\n    \"description\": \"207p, com amassados nas pontas\",\r\n    \"isbn\": \"ISBN 132454651213\",\r\n    \"shelf_location\": \"D365\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"id\": 1,\r\n    \"name\": \"Álgebra Linear\",\r\n    \"author\": \"Boldrini\",\r\n    \"year_publication\": 2022,\r\n    \"publishing_company\": \"Arqueiro\",\r\n    \"subject\": \"Matemática\",\r\n    \"description\": \"207p, com amassados nas pontas\",\r\n    \"isbn\": \"ISBN 132454651213\",\r\n    \"shelf_location\": \"D365\",\r\n    \"status\": \"EMPRESTADO\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "loans",
			"item": [
				{
					"name": "Loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book is not availible for loan\",\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/loan",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"loan"
							]
						}
					},
					"response": []
				},
				{
					"name": "Devolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book has already been returned\",\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3333/v1/devolutions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3333",
							"path": [
								"v1",
								"devolutions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "G7bdTA3979aqPhvzd2P7p6vSZ1dkUmpPRykZH9ys2QUwTmTGmjWbkKjOcULxLjFXI3cWr8yvuJVM4AZl0k5rUgyV9A01TPdHYq1ob4GumepSAvtMuTtzRIyCww3KSQXN",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}