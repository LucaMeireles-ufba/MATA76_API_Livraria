{
	"info": {
		"_postman_id": "648a52f4-f370-45ac-bb59-4019f6bea447",
		"name": "API Livraria",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24887753"
	},
	"item": [
		{
			"name": "author",
			"item": [
				{
					"name": "Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()",
									"",
									"messages = [",
									"       \"field required\",",
									"       \"value_error.missing\"",
									" ]",
									"",
									" if (pm.response.code === 200) {",
									"     pm.test(`SUCCESS`, () => {",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.id).to.be.a('number');",
									"        pm.expect(jsonData).to.have.property('name');",
									"        pm.expect(jsonData.name).to.be.a('string');",
									"    })   ",
									" }",
									" else { ",
									"    pm.test(`ERROR`, () => {",
									"        pm.expect(jsonData).to.have.property('detail');",
									"        pm.expect(jsonData.detail[0].msg).to.be.oneOf(messages);",
									"        pm.expect(jsonData.detail[0].type).to.be.oneOf(messages);",
									"    }) ",
									" }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/authors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"authors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()\r",
									"\r",
									" if (pm.response.code === 200) {\r",
									"     pm.test(`SUCCESS`, () => {\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.expect(jsonData.id).to.be.a('number');\r",
									"        pm.expect(jsonData).to.have.property('name');\r",
									"        pm.expect(jsonData.name).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('isbn');\r",
									"        pm.expect(jsonData.isbn).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('year_publication');\r",
									"        pm.expect(jsonData.year_publication).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('publishing_company');\r",
									"        pm.expect(jsonData.publishing_company).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('description');\r",
									"        pm.expect(jsonData.description).to.be.a('string');\r",
									"    })   \r",
									" }\r",
									" else { \r",
									"    pm.test(`ERROR`, () => {\r",
									"        pm.expect(jsonData).to.have.property('detail');\r",
									"    }) \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"author_id\": {{author}},\r\n    \"year_publication\": {{year_publication}},\r\n    \"publishing_company\": \"{{publishing_company}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"isbn\": \"{{isbn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/books?author_id=22",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "author_id",
									"value": "22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()\r",
									"\r",
									" if (pm.response.code === 200) {\r",
									"     pm.test(`SUCCESS`, () => {\r",
									"        pm.expect(jsonData).to.be.an('array');\r",
									"        pm.expect(jsonData[0]).to.have.property('id');\r",
									"        pm.expect(jsonData[0].id).to.be.a('number');\r",
									"        pm.expect(jsonData[0]).to.have.property('name');\r",
									"        pm.expect(jsonData[0].name).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('isbn');\r",
									"        pm.expect(jsonData[0].isbn).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('year_publication');\r",
									"        pm.expect(jsonData[0].year_publication).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('publishing_company');\r",
									"        pm.expect(jsonData[0].publishing_company).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('description');\r",
									"        pm.expect(jsonData[0].description).to.be.a('string');\r",
									"    })   \r",
									" }\r",
									" else { \r",
									"    pm.test(`ERROR`, () => {\r",
									"        pm.expect(jsonData).to.have.property('detail');\r",
									"    }) \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "1",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "2",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Daniel Santos",
									"disabled": true
								},
								{
									"key": "year_publication",
									"value": "2020",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Caulculo numérico",
									"disabled": true
								},
								{
									"key": "publishing_company",
									"value": "Arqueiro",
									"disabled": true
								},
								{
									"key": "subject",
									"value": "matemática",
									"disabled": true
								},
								{
									"key": "ISBN",
									"value": "ISBN 1321546512313",
									"disabled": true
								},
								{
									"key": "status",
									"value": "DISPONIVEL",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books by ISBN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()",
									"",
									" if (pm.response.code === 200) {",
									"     pm.test(`SUCCESS`, () => {",
									"        pm.expect(jsonData).to.be.an('array');",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0].id).to.be.a('number');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0].name).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('isbn');",
									"        pm.expect(jsonData[0].isbn).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('year_publication');",
									"        pm.expect(jsonData[0].year_publication).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('publishing_company');",
									"        pm.expect(jsonData[0].publishing_company).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('description');",
									"        pm.expect(jsonData[0].description).to.be.a('string');",
									"    })   ",
									" }",
									" else { ",
									"    pm.test(`ERROR`, () => {",
									"        pm.expect(jsonData).to.have.property('detail');",
									"    }) ",
									" }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/books/{{book_isbn}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books",
								"{{book_isbn}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()\r",
									"\r",
									" if (pm.response.code === 200) {\r",
									"     pm.test(`SUCCESS`, () => {\r",
									"        pm.expect(jsonData).to.be.an('array');\r",
									"        pm.expect(jsonData[0]).to.have.property('id');\r",
									"        pm.expect(jsonData[0].id).to.be.a('number');\r",
									"        pm.expect(jsonData[0]).to.have.property('name');\r",
									"        pm.expect(jsonData[0].name).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('isbn');\r",
									"        pm.expect(jsonData[0].isbn).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('year_publication');\r",
									"        pm.expect(jsonData[0].year_publication).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('publishing_company');\r",
									"        pm.expect(jsonData[0].publishing_company).to.be.a('string');\r",
									"        pm.expect(jsonData[0]).to.have.property('description');\r",
									"        pm.expect(jsonData[0].description).to.be.a('string');\r",
									"    })   \r",
									" }\r",
									" else { \r",
									"    pm.test(`ERROR`, () => {\r",
									"        pm.expect(jsonData).to.have.property('detail');\r",
									"    }) \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id}},\r\n    \"name\": {{name}},\r\n    \"author\": {{author}},\r\n    \"year_publication\": {{year_publication}},\r\n    \"publishing_company\": {{publishing_company}},\r\n    \"subject\": {{subject}},\r\n    \"description\": {{description}},\r\n    \"isbn\": {{isbn}},\r\n    \"shelf_location\": {{shelf_location}},\r\n    \"status\": {{status}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/books?author_id={{id}}&name=\"{{name}}\"",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "author_id",
									"value": "{{id}}"
								},
								{
									"key": "name",
									"value": "\"{{name}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()\r",
									"\r",
									" if (pm.response.code === 200) {\r",
									"     pm.test(`SUCCESS`, () => {\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.expect(jsonData.id).to.be.a('number');\r",
									"        pm.expect(jsonData).to.have.property('name');\r",
									"        pm.expect(jsonData.name).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('isbn');\r",
									"        pm.expect(jsonData.isbn).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('year_publication');\r",
									"        pm.expect(jsonData.year_publication).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('publishing_company');\r",
									"        pm.expect(jsonData.publishing_company).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('description');\r",
									"        pm.expect(jsonData.description).to.be.a('string');\r",
									"    })   \r",
									" }\r",
									" else { \r",
									"    pm.test(`ERROR`, () => {\r",
									"        pm.expect(jsonData).to.have.property('detail');\r",
									"    }) \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id}}\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/books?id={{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"books"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "customer",
			"item": [
				{
					"name": "Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()",
									"",
									" if (pm.response.code === 200) {",
									"     pm.test(`SUCCESS`, () => {",
									"        pm.expect(jsonData).to.be.an('array');",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0].id).to.be.a('number');",
									"        pm.expect(jsonData[0]).to.have.property('name');",
									"        pm.expect(jsonData[0].name).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('birth_day');",
									"        pm.expect(jsonData[0].birth_day).to.be.a('string');",
									"        pm.expect(jsonData[0]).to.have.property('address');",
									"        pm.expect(jsonData[0].address).to.be.a('string');",
									"    })   ",
									" }",
									" else { ",
									"    pm.test(`ERROR`, () => {",
									"        pm.expect(jsonData).to.have.property('detail');",
									"    }) ",
									" }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/customers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"customers",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "1",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()",
									"",
									" if (pm.response.code === 200) {",
									"     pm.test(`SUCCESS`, () => {",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.id).to.be.a('number');",
									"        pm.expect(jsonData).to.have.property('name');",
									"        pm.expect(jsonData.name).to.be.a('string');",
									"        pm.expect(jsonData).to.have.property('birth_day');",
									"        pm.expect(jsonData.birth_day).to.be.a('string');",
									"        pm.expect(jsonData).to.have.property('address');",
									"        pm.expect(jsonData.address).to.be.a('string');",
									"    })   ",
									" }",
									" else { ",
									"    pm.test(`ERROR`, () => {",
									"        pm.expect(jsonData).to.have.property('detail');",
									"    }) ",
									" }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/customer/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"customer",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()",
									"",
									" if (pm.response.code === 200) {",
									"     pm.test(`SUCCESS`, () => {",
									"        pm.expect(jsonData).to.have.property('id');",
									"        pm.expect(jsonData.id).to.be.a('number');",
									"        pm.expect(jsonData).to.have.property('name');",
									"        pm.expect(jsonData.name).to.be.a('string');",
									"        pm.expect(jsonData).to.have.property('birth_day');",
									"        pm.expect(jsonData.birth_day).to.be.a('string');",
									"        pm.expect(jsonData).to.have.property('address');",
									"        pm.expect(jsonData.address).to.be.a('string');",
									"    })   ",
									" }",
									" else { ",
									"    pm.test(`ERROR`, () => {",
									"        pm.expect(jsonData).to.have.property('detail');",
									"    }) ",
									" }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bruno\",\r\n    \"birth_day\": \"11/06/1999\",\r\n    \"address\": \"Rua Fulano de Tal, 123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/customers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"customers",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "loans",
			"item": [
				{
					"name": "Loans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/loans/?skip=100&limit=1000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"loans",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "100"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loans By Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/loans/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"loans",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json()\r",
									"\r",
									" if (pm.response.code === 200) {\r",
									"     pm.test(`SUCCESS`, () => {\r",
									"        pm.expect(jsonData).to.have.property('id');\r",
									"        pm.expect(jsonData.id).to.be.a('number');\r",
									"        pm.expect(jsonData).to.have.property('date');\r",
									"        pm.expect(jsonData.date).to.be.a('string');\r",
									"        pm.expect(jsonData).to.have.property('book_id');\r",
									"        pm.expect(jsonData.book_id).to.be.a('number');\r",
									"        pm.expect(jsonData).to.have.property('customer_id');\r",
									"        pm.expect(jsonData.customer_id).to.be.a('number');\r",
									"    })   \r",
									" }\r",
									" else { \r",
									"    pm.test(`ERROR`, () => {\r",
									"        pm.expect(jsonData).to.have.property('detail');\r",
									"    }) \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{date}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/loans/?customer_id={{customer_id}}&book_id={{book_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"loans",
								""
							],
							"query": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}"
								},
								{
									"key": "book_id",
									"value": "{{book_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Devolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book has already been returned\",\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/devolutions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"devolutions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "G7bdTA3979aqPhvzd2P7p6vSZ1dkUmpPRykZH9ys2QUwTmTGmjWbkKjOcULxLjFXI3cWr8yvuJVM4AZl0k5rUgyV9A01TPdHYq1ob4GumepSAvtMuTtzRIyCww3KSQXN",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}