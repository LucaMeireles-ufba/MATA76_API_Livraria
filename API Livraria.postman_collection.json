{
	"info": {
		"_postman_id": "f901189b-8cb9-4cc2-b9d6-cf58482a6054",
		"name": "API Livraria",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "author",
			"item": [
				{
					"name": "Author",
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{name}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/authors/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"authors",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"    \"Missing properties\",\r",
									"    \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": {{name}},\r\n    \"author_id\": {{author}},\r\n    \"year_publication\": {{year_publication}},\r\n    \"publishing_company\": {{publishing_company}},\r\n    \"subject\": {{subject}},\r\n    \"description\": {{description}},\r\n    \"isbn\": {{isbn}},\r\n    \"shelf_location\": {{shelf_location}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/books?author_id={{author}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "author_id",
									"value": "{{author}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"    \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"     var Ajv = require('ajv'),\r",
									"    ajv = new Ajv({ logger: console, allErrors: true }),\r",
									"    schema =  \r",
									"    {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"id\": \"integer\",\r",
									"            \"name\": \"string\",\r",
									"            \"author\": \"string\",\r",
									"            \"year_publication\": \"integer\",\r",
									"            \"publishing_company\": \"string\",\r",
									"            \"subject\": \"string\",\r",
									"            \"description\": \"string\",\r",
									"            \"isbn\": \"string\",\r",
									"            \"shelf_location\": \"string\",\r",
									"            \"status\": \"string\"\r",
									"        }\r",
									"    }\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"    pm.expect(jsonData.books).to.be.an(\"array\");\r",
									"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors))\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "1",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "2",
									"disabled": true
								},
								{
									"key": "author",
									"value": "Daniel Santos",
									"disabled": true
								},
								{
									"key": "year_publication",
									"value": "2020",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Caulculo numérico",
									"disabled": true
								},
								{
									"key": "publishing_company",
									"value": "Arqueiro",
									"disabled": true
								},
								{
									"key": "subject",
									"value": "matemática",
									"disabled": true
								},
								{
									"key": "ISBN",
									"value": "ISBN 1321546512313",
									"disabled": true
								},
								{
									"key": "status",
									"value": "DISPONIVEL",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Books by ISBN",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/books/{{book_isbn}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books",
								"{{book_isbn}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    id: {{id}},\r\n    \"name\": {{name}},\r\n    \"author\": {{author}},\r\n    \"year_publication\": {{year_publication}},\r\n    \"publishing_company\": {{publishing_company}},\r\n    \"subject\": {{subject}},\r\n    \"description\": {{description}},\r\n    \"isbn\": {{isbn}},\r\n    \"shelf_location\": {{shelf_location}},\r\n    \"status\": {{status}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id}}\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/books",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "customer",
			"item": [
				{
					"name": "Customer",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/customers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"customers",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "1",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer By Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/customer/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"customer",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bruno\",\r\n    \"birth_day\": \"11/06/1999\",\r\n    \"address\": \"Rua Fulano de Tal, 123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/customers/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"customers",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "loans",
			"item": [
				{
					"name": "Loans",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/loans/?skip&limit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"loans",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": null
								},
								{
									"key": "limit",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loans By Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/v1/loans/{{id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"loans",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book is not availible for loan\",\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/loans/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"loans",
								""
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								},
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Devolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json(),\r",
									"\r",
									" messages = [\r",
									"       \"The book has already been returned\",\r",
									"       \"The book id was not found\",\r",
									"       \"Unauthenticated\"\r",
									" ]\r",
									"\r",
									" if (jsonData.success === false) {\r",
									"\r",
									"    pm.test(`*** E R R O R *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.type).to.equal(\"error\")\r",
									"        pm.expect(jsonData.message).to.be.oneOf(messages)\r",
									"        pm.expect(jsonData.status).to.equal(400)\r",
									"        pm.expect()\r",
									"    })\r",
									" }\r",
									" else {\r",
									"\r",
									"    pm.test(`*** S U C C E S S *** ${jsonData.message}`, () => {\r",
									"        pm.expect(jsonData.success).to.equal(true)\r",
									"        pm.expect(jsonData.message).to.equal('the operation was performed successfully')\r",
									"        pm.expect(jsonData.status).to.equal(201)\r",
									"        pm.expect(jsonData).to.have('timestamp')\r",
									"    })   \r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8000/v1/devolutions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"v1",
								"devolutions"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "G7bdTA3979aqPhvzd2P7p6vSZ1dkUmpPRykZH9ys2QUwTmTGmjWbkKjOcULxLjFXI3cWr8yvuJVM4AZl0k5rUgyV9A01TPdHYq1ob4GumepSAvtMuTtzRIyCww3KSQXN",
				"type": "string"
			},
			{
				"key": "key",
				"value": "apiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}